/ *** Demonstration for unsigned integer modular division *** /

    // * EXAMPLE 1  * //
    // *  50 mod 3  * //

MAIN, 	Clear
/Store divisor
		Load THREE
        Store DIVISOR
/ invoke function
		Load  FIFTY
        JnS MODULAR_DIV
/Print quotient
        Load REMAINDER		/ 50 % 3 = 2
        Output


    // * EXAMPLE 2  * //
    // *  90 mod 3  * //

/ Store divisor
		Load THREE
        Store DIVISOR
/ invoke function
		Load  NINTEY
        JnS MODULAR_DIV
/ Print quotient
        Load REMAINDER		/ 90 % 3 = 0 
        Output

    // * EXAMPLE 3  * //
    // *  71 mod 5  * //


/Store divisor
		Load FIVE
        Store DIVISOR
/ invoke function
		Load  SEVENTY_ONE
        JnS MODULAR_DIV
/Print quotient
        Load REMAINDER		/ 71 % 5 = 1
        Output
        
		HALT

/ Modular Division is implimented as repeated subtraction
/ untill ACCUMILATOR is negative
/ #returns value of AC before it dips below 0
MODULAR_DIV,DEC 0 				/ return adress stored here
			
LOOP,		Store REMAINDER			/ store value of ACCUMILATOR           
/ subtraction
            Subt DIVISOR
            
            Skipcond 000		/ return if ACCUMILATOR < 0
            Jump LOOP			/ repeat

			JumpI MODULAR_DIV	/ return

            

/ Variables for division
REMAINDER,  DEC 0
DIVISOR,	DEC 1

/ Test numbers
FIFTY,		DEC 50
SEVENTY_ONE,DEC 71
NINTEY,		DEC 90

/ Test divisors
THREE,	 DEC  3
FIVE,	 DEC  5